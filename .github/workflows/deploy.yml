# 이 자동화 프로세스의 이름
name: Deploy to AWS EC2

# 1. 언제 이 자동화를 실행할 것인가? (트리거 설정)
on:
  push:
    branches:
      - main # "main" 브랜치에 코드가 push(업데이트)될 때마다 실행

# 2. 어떤 작업을 수행할 것인가?
jobs:
  # "deploy"라는 이름의 작업을 정의
  deploy:
    # 이 작업은 우분투 최신 버전 환경의 가상 서버에서 실행
    runs-on: ubuntu-latest

    # 3. 작업 순서 (단계별)
    steps:
      # 1단계: GitHub 저장소의 코드를 작업 공간(가상 서버)으로 가져오기
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2단계: JDK 17 설치하기 (프로젝트 빌드에 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3단계: gradlew 파일에 실행 권한 부여
      # ./gradlew 명령어를 실행하려면 이 파일이 실행 가능하다는 권한이 있어야 함
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4단계: Gradle로 프로젝트 빌드하기 (실행 가능한 JAR 파일 생성)
      - name: Build with Gradle
        run: ./gradlew build

      # 5단계: 빌드 결과물(.jar 파일)이 제대로 생성되었는지 확인
      # 이 단계는 build/libs/ 폴더의 파일 목록을 출력하여 .jar 파일 존재 여부를 확인합니다.
      - name: Check for JAR file
        run: ls -l build/libs/

      # 6단계: 빌드된 JAR 파일을 EC2 서버로 전송하기
      - name: Transfer JAR to EC2
        # appleboy/scp-action 이라는 미리 만들어진 도구를 사용
        uses: appleboy/scp-action@master
        with:
          # github에서 설정한 비밀 값들을 여기서 사용!
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22 # SSH 기본 포트
          source: "build/libs/*.jar" # build/libs/ 폴더에 있는 모든 .jar 파일을 전송
          target: "/home/ubuntu/app" # EC2 서버의 이 폴더로 전송

      # 7단계: EC2 서버에 접속해서 애플리케이션 실행하기
      - name: Execute SSH commands on EC2
        # appleboy/ssh-action 이라는 도구를 사용
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          # EC2 서버에서 실행할 명령어들을 순서대로 나열
          script: |
            pgrep java | xargs kill -9 || true
            cd /home/ubuntu/app
            nohup java -jar *.jar > application.log 2>&1 &
```

---

#### **3단계: 변경사항을 GitHub에 올리기**

이제 우리가 만든 이 **"작업 지시서"** 자체를 GitHub에 올려야 합니다. 그래야 GitHub Actions 로봇이 이 지시서를 읽고 일을 시작할 수 있습니다.

1.  **VS Code 터미널**을 엽니다.
2.  아래 명령어들을 순서대로 실행하여 `.github` 폴더와 `deploy.yml` 파일을 GitHub에 올립니다.

```bash
# 1. 모든 변경사항 추가
git add .

# 2. 변경사항 기록 (메시지는 자유롭게)
git commit -m "feat: Add GitHub Actions workflow for deployment"

# 3. GitHub에 올리기
git push origin main
